#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct Cell
{
    float2 position;
    float2 direction;

    float2 flockHeading;
    float2 flockCentre;
    float2 separationHeading;
    int numFlockmates;
};

RWStructuredBuffer<Cell> cells;
uint numCells;
float viewRadius;
float avoidRadius;

[numthreads(threadGroupSize,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numCells) return;  // Safety check

    for (uint indexB = 0; indexB < numCells; indexB ++)
    {
        if (id.x == indexB) continue;

        Cell cellA = cells[id.x];
        Cell cellB = cells[indexB];
    
        float2 offset = cellB.position - cellA.position;
        float sqrDst = dot(offset, offset);
        
        if (sqrDst < avoidRadius * avoidRadius)
        {
            cellA.separationHeading -= offset / sqrDst;
        }
        else if (sqrDst < viewRadius * viewRadius)
        {
            cellA.numFlockmates += 1;
            cellA.flockHeading += cellB.direction;
            cellA.flockCentre += cellB.position;
        }

        cells[id.x] = cellA;
    }
}